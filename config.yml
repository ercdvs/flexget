secrets: secret.yml

templates:

  global:
    magnets: no
    regexp:
      reject:
        - (s|d)ub(s|bed)?\b: {from: title}                    # Block any subbed/dubbed/etc videos
        - \b(duo|tri|quadri|tetra|penta)logy\b: {from: title} # Block series, only accept one at a time
        - \b3-?D\b: {from: title}                             # I don't have any 3D display
        - \btrailer\b: {from: title}                          # I've gotten a few trailers that matched as movies. VERY annoying
        - \bR5\b: {from: title}                               # The following are poor quality types that somehow got through the quality
        - \bWEBSCR\b: {from: title}                           # features usually due to the title including a keyword like "720p" as well
        - \bscreener\b: {from: title}
        - \bTS\b: {from: title}
        - \b(NEWCAM|Cam|CAM|C@M|HDTS|HDCAM|HC|HQCAM|HQTS)\b: {from: title}                      # No Webcam stuff
        - \bCam\b: {from: title}
        - \b(hd|hds)?cam(rip)?\b: {from: title}
        - '{C_P}': {from: title}                              # The following are groups with poor quality releases
        - TrTd TeaM: {from: title}
        - \[TNTVillage\]: {from: title}
        - \[facepalm\]: {from: title}
        - \bASAP\b: {from: title}

    # require certail file types
    content_filter:
      require:
        - '*.avi'
        - '*.mkv'
        - '*.mpg'
        - '*.mp4'
      reject:
        - 'password.txt'
        - '*.wmv'

  movies_global:
    inputs:
      - rss: 'https://kat.cr/usearch/verified%3A1%20category%3Amovies/?rss=1' # Kickass (Movies)

    archive: [movies]
    regexp:
      reject:
        - s\d+e\d+: {from: title}
        - '\d{4}.\d{2}.\d{2}': {from: title}
        - \d+x\d+: {from: title}
        - \baac2: {from: title} # No 2 channel audio

    # Force proper_movies to run after regexp to avoid unnecessary imdb_lookup
    plugin_priority:
      regexp: 176
      if: 177
      proper_movies: 171

    # Impose reasonable size constraints
    content_size:
      max: 20000
      min: 1000

    imdb_lookup: yes
    trakt_lookup: yes
    # Check for already downloaded or currently downloading movies
    exists_movie:
      - /media/Movie/
      - /usr/local/torrent/

    proper_movies: yes
    set:
      # Give folders/files nice names
      movedone: "/usr/local/torrent/mvdone/{{ imdb_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }} ({{ imdb_year }})"
      # Rename the "content file" to something nice, use leading slash to force file to top level
      content_filename: "{{ imdb_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }}.({{ imdb_year }}).{{ quality }}"
    pushbullet:
      apikey: '{{ secrets.pushbullet.apikey }}'
      title: "[Flexget] New Movie"
      body: "{{ imdb_name }} ({{ imdb_year }})\n{{ quality }}"
      
  


  tv_global:                                                                # All Global Variables for TV
    inputs:
      - rss: 'https://kat.cr/usearch/verified%3A1%20category%3Atv/?rss=1'   # Kickass (TV)
      - rss: 'http://showrss.info/feeds/all.rss'
      - rss: 'https://eztv.ag/ezrss.xml'

    archive: yes
    # size limits that make sense for TV
    content_size:
      max: 5000
      min: 20
    
    exists_series:
      - "/media/TV/"
      - "/usr/local/torrent/"

    # Look up info on TheTVDB.com to fill in extra info
 #   thetvdb_lookup: yes                                                     # Trying just trakt for now
    trakt_lookup: yes
    #require_field: [series_name, series_id]
    
    set:
      queuetotop: yes
      movedone: >
        /usr/local/torrent/tvdone/{{ trakt_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }}
      # Rename the "content file" to something nice, use leading slash to force file to top level
      content_filename: >
        /{{ trakt_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }}.{{ series_id }}{% if tvdb_ep_name|default(False) %}.{{ tvdb_ep_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }}{% endif %}.{{ quality }}
      label: tv

    pushbullet:
      apikey: '{{ secrets.pushbullet.apikey }}'
      title: "[Flexget] New Episode"
      body: "{{ trakt_series_name|default(series_name) }} - {{ series_id }}{% if trakt_ep_name|default(False) %} - {{ trakt_ep_name }}{% endif %}\n{{ quality }}"

    deluge:
      username: '{{ secrets.deluge.username }}'
      password: '{{ secrets.deluge.password }}'
      main_file_only: yes # Ignore all but the file that is >90% of the torrent if it exists
      keep_subs: yes
      automanaged: true
      port: 58846
      removeatratio: yes
      ratio: 0

  # This template uses the movie queue to find movies from various sources
  movies_queued:
    movie_queue: accept
 #   template: movies_search
    disable:
      - seen_movies
    discover:
      what:
        - emit_movie_queue: yes
      from: [ filler: yes ] # Always produce entries

    trakt_remove: # Remove from Trakt list when we accept an item
      account: '{{ secrets.trakt.account }}'
      list: Movies

    trakt_add: # Add accepted item to my Trakt watchlist
      account: '{{ secrets.trakt.account }}'
      list: collection

    set:
      label: my-movies

  movies_search:
    discover:
      from:
        - flexget_archive: [movies]
        - kat:
            category: movies
            verified: yes
        - torrentz:
            reputation: verified
            extra_terms: "movie* hd"
        #- piratebay:
        #    category: "highres movies"
        #    sort_by: seeds
      what: [ filler: yes ] # Always produce entries

tasks:

  movies_1080p:
    priority: 110
    template:
      - movies_global
      - movies_queued
    quality: 1080p+ bluray+ h264+ truehd|dtshd|dd5.1|dts

  movies_720p:
    priority: 120
    template:
      - movies_global
      - movies_queued
    quality: 720p+ dvdrip+ xvid+ truehd|dtshd|dd5.1|dts|ac3
    torrent_alive:
      min_seeds: 5
    delay: 16 days # Wait 16 days for a 1080p movie before trying downloading 720p

  movies_any:
    priority: 130
    template:
      - movies_global
      - movies_queued
    quality: dvdscr+ xvid+ truehd|dtshd|dd5.1|dts|ac3
    torrent_alive:
      min_seeds: 5
    delay: 23 days # Wait 23 days for 1080p then 720p movie, else just grab the bare minimum

  download_tv:
    priority: 10
    template: [tv_global]

    configure_series:
      settings:
        target: 720p+ hdtv+
        timeframe: 1 day
        quality: 480p+ webrip+
        propers: 12 hours
      from:
        trakt_list:
          account: '{{ secrets.trakt.account }}'
          list: TV
          type: shows
          strip_dates: no

  # Cleans movies from the movie queue (and Trakt) that we already have
  clean_movie_queue:
    priority: 90
    template: no_global # None of the global templates make sense here
    disable:
      - seen
      - seen_info_hash
      - seen_movies
    accept_all: yes
    filesystem:
      path: /media/Movie/
      recursive: no
      retrieve: dirs
    imdb_lookup: yes
    tmdb_lookup: yes
    require_field: [movie_name, movie_year]
    movie_queue: accept
    trakt_remove:
      account: '{{ secrets.trakt.account }}'
      list: Movies

  # This task queues all of the movies in my Trakt playlist
  fill_movie_queue:
    priority: 100 # Always run before My-Movies task
    template: no_global # None of the global templates make sense here
    trakt_list:
      account: '{{ secrets.trakt.account }}'
      list: Movies
      type: movies
    no_entries_ok: yes
    accept_all: yes
    movie_queue: add

  

  move_tv:
    template: [no_global]
    disable:
      - seen
      - seen_info_hash
      - backlog
      - remember_rejected
      - retry_failed

    no_entries_ok: yes
    accept_all: yes
    metainfo_series: yes
    trakt_lookup: yes
    filesystem:
      path: "/usr/local/torrent/tvdone/"
      # We are looking for any video files that were extracted
      regexp: '.*\.(avi|mkv|mpg|mp4|m4v)$'
      recursive: yes

    require_field: [trakt_series_name, series_id]
    move:
      # Folder to move to
      to: >
        /media/TV/{{ trakt_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }}/{% if series_id_type == 'ep' %}Season {{ series_season }}/{% endif %}
      # Filename (inside of folder) to move to
      filename: >
        {{ trakt_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }}.{{ series_id }}{% if tvdb_ep_name|default(False) %}.{{ tvdb_ep_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }}{% endif %}.{{ quality }}.{{ location[-3:] }}

      clean_source: 40
      along:
        - sub
        - srt
    trakt_add: # Add accepted item to my Trakt watchlist
      account: '{{ secrets.trakt.account }}'
      list: collection

    
  kill_tv:   # used when TV shows go off air/cancelled to remove them from further downloading
    template:
      - no_global
    disable:
      - seen
      - seen_info_hash
      - backlog
      - remember_rejected
      - retry_failed

    trakt_lookup: yes
    trakt_list:
      account: '{{ secrets.trakt.account }}'
      list: TV
      type: shows
    all_series: yes

    if:
      - trakt_series_status == 'ended': accept

    trakt_remove:
      account: '{{ secrets.trakt.account }}'
      list: TV
  # Discover new shows that are not already added to the existing lists
  # limit by genres i just don't care about
  tv_premiere:
    priority: 50
    template:
      - tv_global

    # The entry has to have the tvdb_genres field so I can filter by it
    require_field:
      - trakt_series_genres
      - trakt_series_first_aired_iso

    # Make sure plenty of people are seeding it, otherwise it may not be that good
    torrent_alive:
      min_seeds: 50
    regexp:
      reject:
        - documentary: {from: trakt_series_genres}
        - talk show: {from: trakt_series_genres}
        - game show: {from: trakt_series_genres}
#        - reality: {from: tvdb_genres}
#        - crime: {from: tvdb_genres}
        - home and garden: {from: trakt_series_genres}

    if:
      # Block these genres only if they are the ONLY genre listed in
      # tvdb_genres. For example, this will not block a show that's both
      # "Comedy" and "Drama" but it will block a show that is just "Drama"
#      - "tvdb_genres == ['Drama']": reject

      # Block premieres that weren't within the last 60 days
      - trakt_series_first_aired_iso and trakt_series_first_aired_iso < now - timedelta(days=60): reject

    # Accept all series permieres
    series_premiere:
      timeframe: 1 days
      quality: 720p+ hdtv+
    # Add to deluge, but don't queue to top (My_TV_Shows are more important)
    # and put in a different locatio
    set:
      movedone: >
        /media/TV/tvdone/{{ trakt_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }}/{% if series_id_type == 'ep' %}
      queuetotop: no
      label: tv-premiere

  seed:
    disable:
      - seen
    trakt_emit:
      account: '{{ secrets.trakt.account }}'
      list: TV
      context: collected
    accept_all: yes
    set_series_begin: yes
    archive: yes

# Run flexget on a periodic basis
schedules:

  - tasks: [ 'dropbox_*','move_*' ]
    interval:
      minutes: 15

  - tasks: [ 'download_tv' ]
    schedule:
      minute: 3,18,33,48

  - tasks: [ 'tv_premiere' ]
    interval:
      hours: 2

  - tasks: [ 'fill_movie_queue', 'movies_*' ]
    interval:
      hours: 1

  - tasks: [ 'clean_movie_queue','kill_tv' ]
    interval:
      weeks: 1


